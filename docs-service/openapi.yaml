openapi: 3.0.0
info:
  title: Room Booking System API
  version: 0.1.0
servers:
  - url: 'http://sds.samchatfield.com/api'
tags:
  - name: user
    description: User data
  - name: room
    description: Room data
paths:
  /user:
    get:
      tags:
        - user
      summary: Get all users
      responses:
        '200':
          description: User data.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - user
      summary: Create new user
      requestBody:
        description: User object to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Created user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  '/user/{userId}':
    get:
      tags:
        - user
      summary: Get all user data
      parameters:
        - name: userId
          in: path
          required: true
          description: The userId for which to get data.
          schema:
            $ref: '#/components/schemas/User/properties/userId'
      responses:
        '200':
          description: User data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  '/user/{userId}/locations':
    get:
      tags:
        - user
      summary: Get user location data
      parameters:
        - name: userId
          in: path
          required: true
          description: The userId for which to get data.
          schema:
            $ref: '#/components/schemas/User/properties/userId'
      responses:
        '200':
          description: User location data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User/properties/locations'
        '404':
          description: User not found
    post:
      tags:
        - user
      summary: Add a new location
      parameters:
        - name: userId
          in: path
          required: true
          description: The userId to add a new location for.
          schema:
            $ref: '#/components/schemas/User/properties/userId'
      requestBody:
        description: Location object to add.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                time:
                  type: string
                  format: date-time
                  description: Date and time as ISO 8601 string
                  default: Date.now
                latitude:
                  type: number
                  format: double
                  description: Latitude in decimal degrees
                longitude:
                  type: number
                  format: double
                  description: Longitude in decimal degrees
              required:
                - latitude
                - longitude
      responses:
        '200':
          description: Updated user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  '/user/{userId}/files':
    get:
      tags:
        - user
      summary: Get user files
      parameters:
        - name: userId
          in: path
          required: true
          description: The userId for which to get data.
          schema:
            $ref: '#/components/schemas/User/properties/userId'
      responses:
        '200':
          description: User files.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User/properties/files'
        '404':
          description: User not found
    post:
      tags:
        - user
      summary: Upload a new file
      parameters:
        - name: userId
          in: path
          required: true
          description: The userId to upload a new file for.
          schema:
            $ref: '#/components/schemas/User/properties/userId'
      requestBody:
        description: New files to upload.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: multipart/form-data files each sent with key 'file'.
      responses:
        '200':
          description: Updated user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete all user files
      parameters:
        - name: userId
          in: path
          required: true
          description: The userId to delete all files for.
          schema:
            $ref: '#/components/schemas/User/properties/userId'
      responses:
        '200':
          description: Updated user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  '/user/{userId}/files/{fileId}':
    delete:
      tags:
        - user
      summary: Delete one user file
      parameters:
        - name: userId
          in: path
          required: true
          description: The userId to delete a file for.
          schema:
            $ref: '#/components/schemas/User/properties/userId'
        - name: fileId
          in: path
          required: true
          description: The fileId of the file to delete.
          schema:
            $ref: '#/components/schemas/User/properties/files/items/properties/_id'
      responses:
        '200':
          description: Updated user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: File not found
  '/user/{userId}/preferences':
    put:
      tags:
        - user
      summary: Update user preferences
      parameters:
        - name: userId
          in: path
          required: true
          description: The userId to update preferences for.
          schema:
            $ref: '#/components/schemas/User/properties/userId'
      requestBody:
        description: >-
          New preferences object to set. The request body will overwrite the old
          preferences object rather than being merged into it. Therefore, any
          preferences missing from the request body will be removed.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User/properties/preferences'
      responses:
        '200':
          description: Updated user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  '/room/{roomNumber}/unlock':
    post:
      tags:
        - room
      summary: Check if room should unlock for given userId
      parameters:
        - name: roomNumber
          in: path
          required: true
          description: The roomNumber for the query.
          schema:
            type: integer
      requestBody:
        description: Object containing userId to check for permissions to unlock room.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: '#/components/schemas/User/properties/userId'
      responses:
        '200':
          description: Boolean response indicating whether to unlock door.
          content:
            application/json:
              schema:
                type: object
                properties:
                  unlock:
                    type: boolean
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - Invalid room number provided
                      - No userId provided
                    description: Error message
components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          description: User ID
          example: '1234567'
        locations:
          type: array
          items:
            type: object
            properties:
              time:
                type: string
                format: date-time
                description: Date and time as ISO 8601 string
                default: Date.now
                example: '2019-03-14T14:35:39.609Z'
              latitude:
                type: number
                format: double
                description: Latitude in decimal degrees
                example: 52.4505
              longitude:
                type: number
                format: double
                description: Longitude in decimal degrees
                example: -1.9357
            required:
              - latitude
              - longitude
        files:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                pattern: '^[0-9a-f]{24}$'
                description: File ID
                readOnly: true
                example: '5c87a8bce2ae7509af1e9880'
              time:
                type: string
                format: date-time
                description: Date and time file was uploaded
                default: Date.now
                readOnly: true
                example: '2019-03-11T19:04:59.472Z'
              name:
                type: string
                description: Filename composed of original filename and the date and time the file was uploaded
                example: 'recording-2019-03-11T19:04:59.472Z.wav'
              path:
                type: string
                description: >-
                  Relative path to URL of file on the server (including
                  filename)
                example: '/api/user/files/1234567/recording-2019-03-11T19:04:59.472Z.wav'
            required:
              - name
              - path
        preferences:
          type: object
          additionalProperties:
            type: number
            format: double
          example:
            TV: 0.642
            PROJECTOR: 0.341
      required:
        - userId
    Room:
      type: object
      properties:
        roomId:
          type: string
          pattern: '^\w+-\w+$'
          description: Room ID
          example: 'CS-225'
        floor:
          type: number
          description: Floor number that the room is located on
          example: 2
        location:
          type: object
          properties:
            latitude:
              type: number
              format: double
              description: Latitude in decimal degrees
              example: 52.4505
            longitude:
              type: number
              format: double
              description: Longitude in decimal degrees
              example: -1.9357
          required:
            - latitude
            - longitude
        capacity:
          type: number
          format: integer
          minimum: 1
          description: The number of people that can be booked into the room
        equipment:
          type: array
          uniqueItems: true
          items:
            type: string
            enum:
              - TV
              - PROJECTOR
          description: List of the equipment in the room
          example:
            - TV
            - PROJECTOR
        bookings:
          type: array
          items:
            type: object
            properties:
              start:
                type: string
                format: date-time
                description: Start date and time of the booking, must be on the hour
                example: '2019-03-13T13:00:00.000Z'
              end:
                type: string
                format: date-time
                readOnly: true
                description: End date and time of the booking, exactly one hour after start
                example: '2019-03-13T14:00:00.000Z'
              leader:
                $ref: '#/components/schemas/User/properties/userId'
              users:
                type: array
                uniqueItems: true
                minItems: 1
                items:
                  $ref: '#/components/schemas/User/properties/userId'
                description: The users that are part of this booking, including the leader
                example:
                  - '1234567'
                  - '7654321'
            required:
              - start
              - leader
              - users
        noiseLevel:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
          description: The noise level of the room
          example: MEDIUM
        temperatureLevel:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
          description: The temperature level of the room
          example: MEDIUM
        wifiSpeed:
          type: number
          format: integer
          description: The WiFi speed in the room in Mb/s
          example: 40
      required:
        - roomId
        - floor
        - location
        - capacity
        - equipment
